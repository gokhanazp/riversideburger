// Image Service - Resim y√ºkleme ve boyutlandƒ±rma servisi
import { supabase } from '../lib/supabase';

/**
 * Resmi boyutlandƒ±r ve optimize et (Resize and optimize image)
 * @param file - Y√ºklenecek dosya (File to upload)
 * @param maxWidth - Maksimum geni≈ülik (Maximum width)
 * @param maxHeight - Maksimum y√ºkseklik (Maximum height)
 * @param quality - Kalite (0-1 arasƒ±) (Quality 0-1)
 * @returns Optimize edilmi≈ü blob (Optimized blob)
 */
export const resizeImage = async (
  file: File,
  maxWidth: number = 1200,
  maxHeight: number = 800,
  quality: number = 0.8
): Promise<Blob> => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();

    reader.onload = (e) => {
      const img = new Image();

      img.onload = () => {
        // Canvas olu≈ütur (Create canvas)
        const canvas = document.createElement('canvas');
        let width = img.width;
        let height = img.height;

        // Boyutlarƒ± hesapla (Calculate dimensions)
        if (width > height) {
          if (width > maxWidth) {
            height = (height * maxWidth) / width;
            width = maxWidth;
          }
        } else {
          if (height > maxHeight) {
            width = (width * maxHeight) / height;
            height = maxHeight;
          }
        }

        // Canvas boyutlarƒ±nƒ± ayarla (Set canvas dimensions)
        canvas.width = width;
        canvas.height = height;

        // Resmi √ßiz (Draw image)
        const ctx = canvas.getContext('2d');
        if (!ctx) {
          reject(new Error('Canvas context olu≈üturulamadƒ±'));
          return;
        }

        ctx.drawImage(img, 0, 0, width, height);

        // Blob'a √ßevir (Convert to blob)
        canvas.toBlob(
          (blob) => {
            if (blob) {
              console.log('‚úÖ Resim boyutlandƒ±rƒ±ldƒ±:', {
                originalSize: `${(file.size / 1024).toFixed(2)} KB`,
                newSize: `${(blob.size / 1024).toFixed(2)} KB`,
                originalDimensions: `${img.width}x${img.height}`,
                newDimensions: `${width}x${height}`,
              });
              resolve(blob);
            } else {
              reject(new Error('Blob olu≈üturulamadƒ±'));
            }
          },
          'image/jpeg',
          quality
        );
      };

      img.onerror = () => {
        reject(new Error('Resim y√ºklenemedi'));
      };

      img.src = e.target?.result as string;
    };

    reader.onerror = () => {
      reject(new Error('Dosya okunamadƒ±'));
    };

    reader.readAsDataURL(file);
  });
};

/**
 * Dosya boyutunu kontrol et (Check file size)
 * @param file - Kontrol edilecek dosya (File to check)
 * @param maxSizeMB - Maksimum boyut (MB) (Maximum size in MB)
 * @returns Ge√ßerli mi? (Is valid?)
 */
export const validateFileSize = (file: File, maxSizeMB: number = 5): boolean => {
  const maxSizeBytes = maxSizeMB * 1024 * 1024;
  return file.size <= maxSizeBytes;
};

/**
 * Dosya tipini kontrol et (Check file type)
 * @param file - Kontrol edilecek dosya (File to check)
 * @returns Ge√ßerli mi? (Is valid?)
 */
export const validateFileType = (file: File): boolean => {
  const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
  return validTypes.includes(file.type);
};

/**
 * √úr√ºn resmi y√ºkle (Upload product image)
 * @param file - Y√ºklenecek dosya (File to upload)
 * @param productId - √úr√ºn ID (Product ID)
 * @returns Resim URL'si (Image URL)
 */
export const uploadProductImage = async (
  file: File,
  productId?: string
): Promise<string> => {
  try {
    console.log('üì§ √úr√ºn resmi y√ºkleniyor...', {
      name: file.name,
      size: `${(file.size / 1024).toFixed(2)} KB`,
      type: file.type,
    });

    // Dosya tipini kontrol et (Check file type)
    if (!validateFileType(file)) {
      throw new Error('Ge√ßersiz dosya tipi. Sadece JPEG, PNG ve WebP desteklenir.');
    }

    // Dosya boyutunu kontrol et (Check file size)
    if (!validateFileSize(file, 5)) {
      throw new Error('Dosya boyutu 5MB\'dan b√ºy√ºk olamaz.');
    }

    // Resmi boyutlandƒ±r (Resize image)
    const resizedBlob = await resizeImage(file, 800, 800, 0.85);

    // Benzersiz dosya adƒ± olu≈ütur (Generate unique filename)
    const timestamp = Date.now();
    const randomString = Math.random().toString(36).substring(2, 8);
    const fileExt = file.name.split('.').pop() || 'jpg';
    const fileName = productId
      ? `${productId}_${timestamp}.${fileExt}`
      : `product_${timestamp}_${randomString}.${fileExt}`;

    // Supabase Storage'a y√ºkle (Upload to Supabase Storage)
    const { data, error } = await supabase.storage
      .from('product-images')
      .upload(fileName, resizedBlob, {
        contentType: 'image/jpeg',
        cacheControl: '3600',
        upsert: false,
      });

    if (error) {
      console.error('‚ùå Y√ºkleme hatasƒ±:', error);
      throw error;
    }

    // Public URL al (Get public URL)
    const { data: urlData } = supabase.storage
      .from('product-images')
      .getPublicUrl(data.path);

    console.log('‚úÖ √úr√ºn resmi y√ºklendi:', urlData.publicUrl);
    return urlData.publicUrl;
  } catch (error: any) {
    console.error('‚ùå √úr√ºn resmi y√ºkleme hatasƒ±:', error);
    throw error;
  }
};

/**
 * Banner resmi y√ºkle (Upload banner image)
 * @param file - Y√ºklenecek dosya (File to upload)
 * @param bannerId - Banner ID (Banner ID)
 * @returns Resim URL'si (Image URL)
 */
export const uploadBannerImage = async (
  file: File,
  bannerId?: string
): Promise<string> => {
  try {
    console.log('üì§ Banner resmi y√ºkleniyor...', {
      name: file.name,
      size: `${(file.size / 1024).toFixed(2)} KB`,
      type: file.type,
    });

    // Dosya tipini kontrol et (Check file type)
    if (!validateFileType(file)) {
      throw new Error('Ge√ßersiz dosya tipi. Sadece JPEG, PNG ve WebP desteklenir.');
    }

    // Dosya boyutunu kontrol et (Check file size)
    if (!validateFileSize(file, 5)) {
      throw new Error('Dosya boyutu 5MB\'dan b√ºy√ºk olamaz.');
    }

    // Resmi boyutlandƒ±r (Resize image - banner i√ßin daha b√ºy√ºk)
    const resizedBlob = await resizeImage(file, 1920, 1080, 0.85);

    // Benzersiz dosya adƒ± olu≈ütur (Generate unique filename)
    const timestamp = Date.now();
    const randomString = Math.random().toString(36).substring(2, 8);
    const fileExt = file.name.split('.').pop() || 'jpg';
    const fileName = bannerId
      ? `${bannerId}_${timestamp}.${fileExt}`
      : `banner_${timestamp}_${randomString}.${fileExt}`;

    // Supabase Storage'a y√ºkle (Upload to Supabase Storage)
    const { data, error } = await supabase.storage
      .from('banner-images')
      .upload(fileName, resizedBlob, {
        contentType: 'image/jpeg',
        cacheControl: '3600',
        upsert: false,
      });

    if (error) {
      console.error('‚ùå Y√ºkleme hatasƒ±:', error);
      throw error;
    }

    // Public URL al (Get public URL)
    const { data: urlData } = supabase.storage
      .from('banner-images')
      .getPublicUrl(data.path);

    console.log('‚úÖ Banner resmi y√ºklendi:', urlData.publicUrl);
    return urlData.publicUrl;
  } catch (error: any) {
    console.error('‚ùå Banner resmi y√ºkleme hatasƒ±:', error);
    throw error;
  }
};

/**
 * Resmi sil (Delete image)
 * @param imageUrl - Silinecek resim URL'si (Image URL to delete)
 * @param bucket - Bucket adƒ± (Bucket name)
 */
export const deleteImage = async (
  imageUrl: string,
  bucket: 'product-images' | 'banner-images'
): Promise<void> => {
  try {
    // URL'den dosya yolunu √ßƒ±kar (Extract file path from URL)
    const urlParts = imageUrl.split('/');
    const fileName = urlParts[urlParts.length - 1];

    console.log('üóëÔ∏è Resim siliniyor:', fileName);

    const { error } = await supabase.storage.from(bucket).remove([fileName]);

    if (error) {
      console.error('‚ùå Silme hatasƒ±:', error);
      throw error;
    }

    console.log('‚úÖ Resim silindi');
  } catch (error: any) {
    console.error('‚ùå Resim silme hatasƒ±:', error);
    throw error;
  }
};

